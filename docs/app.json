[{"name":"app.R","content":"library(shiny)\nlibrary(rvest)\nlibrary(dplyr)\nlibrary(DT)\n\n# Define the scraper function\nvectorize_item <- function(my_char_vec) {\n  a <- unlist(strsplit(my_char_vec, \"\\nDozent/-in:\\n\"))\n  a <- unlist(strsplit(a, \"\\nZeit und Ort:\\n\"))\n  a <- unlist(strsplit(a, \"\\nwÃ¶chentlich \"))\n  a <- unlist(strsplit(a, \"\\t\\t\\n\"))\n  a <- unlist(strsplit(a, \", Raum:\"))\n  a <- unlist(strsplit(a, \"\\nZielgruppe:\\n \"))\n  a <- unlist(strsplit(a, \"\\nZielgruppen:\\n\" ))\n  a <- unlist(strsplit(a, \"\\n\\n\\nKommentar:\\n\\n\"))\n  return(a)\n}\n\n# Define the UI\nui <- fluidPage(\n  titlePanel(\"jlu evv webscraper\"),\n  tags$div(HTML(\"<h4>by Thomas Haase\")),\n  sidebarLayout(\n    sidebarPanel(\n      HTML(\"<p>Choose your course of study at the evv until you only see a page of courses.<\/p>\"),\n      HTML(\"<p>For example: Here is the <a href='https://studip.uni-giessen.de/evv/extern.php?parent_id=d7f5ba03c2cc44c075b7a773ca11b44a' target='_blank'>Link<\/a> to the BA Social Sciences.<\/p>\"),\n      HTML(\"<p>Get the URL of the page and paste it below to get all courses with informations as a table<\/p>\"),\n      textInput(\"url\", \"Enter a URL:\", value = \"\"),\n      actionButton(\"scrapeButton\", \"Scrape Data\"),\n      downloadButton(\"downloadCSV\", \"Download CSV\")\n    ),\n    mainPanel(\n      DTOutput(\"scrapedData\")\n    )\n  )\n)\n\n# Define the server logic\nserver <- function(input, output, session) {\n  \n  scrapedData <- eventReactive(input$scrapeButton, {\n    url <- input$url\n    \n    if (url == \"\") {\n      return(NULL)\n    }\n    \n    # Web scraping\n    page <- read_html(url)\n    lectureitems0 <- page %>% html_elements(\".lectureItem0\") %>% html_text2()\n    lectureitems1 <- page %>% html_elements(\".lectureItem1\") %>% html_text2()\n    items <- c(rbind(lectureitems1, lectureitems0))\n    items_list <- sapply(items, vectorize_item)\n    df <- do.call(rbind.data.frame, items_list)\n    \n    # Dynamically assign column names based on the number of columns in df\n    colnames(df) <- paste(\"Column\", 1:ncol(df))\n    \n    if (length(colnames(df)) >= 1) {\n      names(df)[1] <- \"title\"\n    }\n    if (length(colnames(df)) >= 2) {\n      names(df)[2] <- \"lecturer\"\n    }\n    if (length(colnames(df)) >= 3) {\n      names(df)[3] <- \"startdate\"\n    }\n    if (length(colnames(df)) >= 4) {\n      names(df)[4] <- \"day_time\"\n    }\n    if (length(colnames(df)) >= 5) {\n      names(df)[5] <- \"nedftdate\"\n    }\n    if (length(colnames(df)) >= 6) {\n      names(df)[6] <- \"place\"\n    }\n    if (length(colnames(df)) >= 7) {\n      names(df)[7] <- \"audience\"\n    }\n    if (length(colnames(df)) >= 8) {\n      names(df)[8] <- \"comment\"\n    }\n    \n    \n    return(df)\n  })\n  \n  \n  \n  \n  output$scrapedData <- renderDT({\n    if (!is.null(scrapedData())) {\n      datatable(scrapedData(), options = list(\n        pageLength = 10, # Adjust the number of rows per page as needed\n        autoWidth = TRUE  # Set autoWidth to TRUE to make the table width responsive\n      ))\n    }\n  })\n  \n  output$downloadCSV <- downloadHandler(\n    filename = function() {\n      \"scraped_data.csv\"\n    },\n    content = function(file) {\n      if (!is.null(scrapedData())) {\n        write.csv(scrapedData(), file)\n      }\n    }\n  )\n}\n\nshinyApp(ui, server)","type":"text"}]
